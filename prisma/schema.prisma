// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id @default(cuid())
  name            String?
  username        String?         @unique
  email           String?         @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  accounts        Account[]
  sessions        Session[]
  transaksiMasuk  TransaksiMasuk[]
  transaksiKeluar TransaksiKeluar[]
  // Optional for WebAuthn support
  Authenticator   Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@unique([provider, providerAccountId])
  @@index([userId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@index([userId])
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model TransaksiMasuk {
  id                String          @id @default(cuid())
  iduser            String
  tanggaltransaksi  DateTime
  obat              Obat[]
  
  user              User     @relation(fields: [iduser], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TransaksiKeluar {
  id                String          @id @default(cuid())
  iduser            String
  idpasien          String
  tanggaltransaksi  DateTime
  obatKeluar        ObatKeluar[]
  
  user              User     @relation(fields: [iduser], references: [id])
  pasien            Pasien   @relation(fields: [idpasien], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Obat {
  id                String          @id @default(cuid())
  idtransaksi       String
  nama              String
  satuan            String
  kuantiti          Int
  status            String
 
  transaksimasuk    TransaksiMasuk     @relation(fields: [idtransaksi], references: [id])
  
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ObatKeluar {
  id                String          @id @default(cuid())
  idtransaksi       String
  nama              String
  satuan            String
  kuantiti          Int
  status            String
 
  transaksikeluar   TransaksiKeluar     @relation(fields: [idtransaksi], references: [id])
  
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Pasien {
  id                String          @id @default(cuid())
  nama              String
  umur              Int
  tanggallahir      DateTime
  alamat            String
  TransaksiKeluar   TransaksiKeluar[]

 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

